<<<<<<< HEAD
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Eye, EyeOff, Phone, Mail, User, Calendar } from "lucide-react";
import { Link } from "react-router-dom";

export default function Auth() {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);

  const countries = [
    { code: "TD", name: "ุชุดุงุฏ", flag: "๐น๐ฉ" },
    { code: "SD", name: "ุงูุณูุฏุงู", flag: "๐ธ๐ฉ" },
    { code: "SA", name: "ุงูุณุนูุฏูุฉ", flag: "๐ธ๐ฆ" },
    { code: "EG", name: "ูุตุฑ", flag: "๐ช๐ฌ" },
    { code: "LY", name: "ููุจูุง", flag: "๐ฑ๐พ" },
    { code: "MA", name: "ุงููุบุฑุจ", flag: "๐ฒ๐ฆ" },
    { code: "DZ", name: "ุงูุฌุฒุงุฆุฑ", flag: "๐ฉ๐ฟ" },
    { code: "TN", name: "ุชููุณ", flag: "๐น๐ณ" },
    { code: "AE", name: "ุงูุฅูุงุฑุงุช", flag: "๐ฆ๐ช" },
    { code: "KW", name: "ุงููููุช", flag: "๐ฐ๐ผ" },
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-background to-secondary/5 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        <div className="text-center mb-8">
          <Link to="/" className="inline-flex items-center gap-2 mb-4">
            <img src="/lovable-uploads/e86cc04d-36b5-4502-99e2-d5e45a98983e.png" alt="ุฃููุงุฏ ุงูุดูุฎ" className="w-12 h-12 rounded-lg" />
            <h1 className="text-2xl font-bold bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
              ูุชุฌุฑ ุฃููุงุฏ ุงูุดูุฎ ููุฅููุชุฑูููุงุช
            </h1>
          </Link>
        </div>

        <Card className="shadow-xl border-0 bg-card/80 backdrop-blur">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl">ูุฑุญุจุงู ุจู</CardTitle>
            <CardDescription>ุณุฌู ุฏุฎููู ุฃู ุฃูุดุฆ ุญุณุงุจุงู ุฌุฏูุฏุงู</CardDescription>
          </CardHeader>
          <CardContent>
            <Tabs defaultValue="login" className="w-full">
              <TabsList className="grid w-full grid-cols-2">
                <TabsTrigger value="login">ุชุณุฌูู ุงูุฏุฎูู</TabsTrigger>
                <TabsTrigger value="register">ุญุณุงุจ ุฌุฏูุฏ</TabsTrigger>
              </TabsList>

              <TabsContent value="login" className="space-y-4">
                <div className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="email">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                      <Input id="email" type="email" placeholder="example@email.com" className="pl-10" />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="password">ูููุฉ ุงููุฑูุฑ</Label>
                    <div className="relative">
                      <Input 
                        id="password" 
                        type={showPassword ? "text" : "password"} 
                        placeholder="ูููุฉ ุงููุฑูุฑ" 
                        className="pr-10"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <Button className="w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90">
                    ุชุณุฌูู ุงูุฏุฎูู
                  </Button>

                  <div className="relative">
                    <div className="absolute inset-0 flex items-center">
                      <span className="w-full border-t" />
                    </div>
                    <div className="relative flex justify-center text-xs uppercase">
                      <span className="bg-background px-2 text-muted-foreground">ุฃู</span>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Button variant="outline" className="w-full">
                      <Phone className="mr-2 h-4 w-4" />
                      ุชุณุฌูู ุจุงููุงุชู
                    </Button>
                    <Button variant="outline" className="w-full">
                      ุฏุฎูู ูุถูู
                    </Button>
                  </div>
                </div>
              </TabsContent>

              <TabsContent value="register" className="space-y-4">
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="firstName">ุงูุงุณู ุงูุฃูู</Label>
                      <div className="relative">
                        <User className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                        <Input id="firstName" placeholder="ุงูุงุณู ุงูุฃูู" className="pl-10" />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="lastName">ุงุณู ุงูุนุงุฆูุฉ</Label>
                      <Input id="lastName" placeholder="ุงุณู ุงูุนุงุฆูุฉ" />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="birthDate">ุชุงุฑูุฎ ุงููููุงุฏ</Label>
                    <div className="relative">
                      <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                      <Input id="birthDate" type="date" className="pl-10" />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="city">ุงููุฏููุฉ</Label>
                    <Input id="city" placeholder="ุงููุฏููุฉ" />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="nationality">ุงูุฌูุณูุฉ</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="ุงุฎุชุฑ ุงูุฌูุณูุฉ" />
                      </SelectTrigger>
                      <SelectContent>
                        {countries.map((country) => (
                          <SelectItem key={country.code} value={country.code}>
                            <span className="flex items-center gap-2">
                              <span>{country.flag}</span>
                              <span>{country.name}</span>
                            </span>
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="regEmail">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
                    <div className="relative">
                      <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                      <Input id="regEmail" type="email" placeholder="example@email.com" className="pl-10" />
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="regPassword">ูููุฉ ุงููุฑูุฑ</Label>
                    <div className="relative">
                      <Input 
                        id="regPassword" 
                        type={showPassword ? "text" : "password"} 
                        placeholder="ูููุฉ ุงููุฑูุฑ" 
                        className="pr-10"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="confirmPassword">ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ</Label>
                    <div className="relative">
                      <Input 
                        id="confirmPassword" 
                        type={showConfirmPassword ? "text" : "password"} 
                        placeholder="ุชุฃููุฏ ูููุฉ ุงููุฑูุฑ" 
                        className="pr-10"
                      />
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        className="absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6"
                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}
                      >
                        {showConfirmPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                      </Button>
                    </div>
                  </div>

                  <Button className="w-full bg-gradient-to-r from-primary to-secondary hover:from-primary/90 hover:to-secondary/90">
                    ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
                  </Button>
                </div>
              </TabsContent>
            </Tabs>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}
=======
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Eye, EyeOff } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { supabase } from "@/integrations/supabase/client";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

const Auth = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [isSignUp, setIsSignUp] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    firstName: '',
    lastName: '',
    birthDate: '',
    address: '',
    nationality: 'Sudan',
    avatar: null as File | null
  });
  
  const { toast } = useToast();
  const navigate = useNavigate();

  const countries = [
    "๐ธ๐ฉ ุงูุณูุฏุงู", "๐น๐ฉ ุชุดุงุฏ", "๐ช๐ฌ ูุตุฑ", "๐ธ๐ฆ ุงูุณุนูุฏูุฉ", "๐ฆ๐ช ุงูุฅูุงุฑุงุช",
    "๐ฐ๐ผ ุงููููุช", "๐ถ๐ฆ ูุทุฑ", "๐ง๐ญ ุงูุจุญุฑูู", "๐ด๐ฒ ุนูุงู", "๐ฏ๐ด ุงูุฃุฑุฏู",
    "๐ฑ๐ง ูุจูุงู", "๐ธ๐พ ุณูุฑูุง", "๐ฎ๐ถ ุงูุนุฑุงู", "๐พ๐ช ุงูููู", "๐ฑ๐พ ููุจูุง",
    "๐น๐ณ ุชููุณ", "๐ฉ๐ฟ ุงูุฌุฒุงุฆุฑ", "๐ฒ๐ฆ ุงููุบุฑุจ", "๐ฒ๐ท ููุฑูุชุงููุง", "๐ธ๐ด ุงูุตููุงู",
    "๐ฉ๐ฏ ุฌูุจูุชู", "๐ฐ๐ฒ ุฌุฒุฑ ุงูููุฑ", "๐ช๐น ุฅุซููุจูุง", "๐ช๐ท ุฅุฑูุชุฑูุง", "๐ณ๐ช ุงูููุฌุฑ",
    "๐ฒ๐ฑ ูุงูู", "๐ง๐ซ ุจูุฑูููุง ูุงุณู", "๐ธ๐ณ ุงูุณูุบุงู", "๐ฌ๐ฒ ุบุงูุจูุง", "๐ฌ๐ผ ุบูููุง ุจูุณุงู",
    "๐ฌ๐ณ ุบูููุง", "๐ธ๐ฑ ุณูุฑุงูููู", "๐ฑ๐ท ููุจูุฑูุง", "๐จ๐ฎ ุณุงุญู ุงูุนุงุฌ", "๐ฌ๐ญ ุบุงูุง",
    "๐น๐ฌ ุชูุบู", "๐ง๐ฏ ุจููู", "๐ณ๐ฌ ููุฌูุฑูุง", "๐จ๐ฒ ุงููุงููุฑูู", "๐จ๐ซ ุฌูููุฑูุฉ ุฃูุฑูููุง ุงููุณุทู",
    "๐ฌ๐ฆ ุงูุบุงุจูู", "๐จ๐ฌ ุงููููุบู", "๐จ๐ฉ ุฌูููุฑูุฉ ุงููููุบู ุงูุฏูููุฑุงุทูุฉ", "๐ฆ๐ด ุฃูุบููุง",
    "๐ฟ๐ฒ ุฒุงูุจูุง", "๐ฟ๐ผ ุฒููุจุงุจูู", "๐ง๐ผ ุจูุชุณูุงูุง", "๐ณ๐ฆ ูุงููุจูุง", "๐ฟ๐ฆ ุฌููุจ ุฃูุฑูููุง",
    "๐ฑ๐ธ ููุณูุชู", "๐ธ๐ฟ ุฅุณูุงุชููู", "๐ฒ๐ฟ ููุฒูุจูู", "๐ฒ๐ผ ูุงูุงูู", "๐น๐ฟ ุชูุฒุงููุง",
    "๐ฐ๐ช ููููุง", "๐บ๐ฌ ุฃูุบูุฏุง", "๐ท๐ผ ุฑูุงูุฏุง", "๐ง๐ฎ ุจูุฑููุฏู", "๐ฒ๐ฌ ูุฏุบุดูุฑ"
  ];

  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      (event, session) => {
        if (event === 'SIGNED_IN' && session?.user) {
          toast({
            title: "๐ ูุฑุญุจุงู ุจู!",
            description: "ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ",
          });
          navigate('/');
        }
      }
    );

    return () => subscription.unsubscribe();
  }, [navigate, toast]);

  const handleSignUp = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const redirectUrl = `${window.location.origin}/`;
      
      const { error } = await supabase.auth.signUp({
        email: formData.email,
        password: formData.password,
        options: {
          emailRedirectTo: redirectUrl,
          data: {
            first_name: formData.firstName,
            last_name: formData.lastName,
            birth_date: formData.birthDate,
            address: formData.address,
            nationality: formData.nationality,
          }
        }
      });

      if (error) {
        toast({
          title: "โ ุฎุทุฃ ูู ุงูุชุณุฌูู",
          description: error.message,
          variant: "destructive"
        });
      } else {
        toast({
          title: "โ ุชู ุฅูุดุงุก ุงูุญุณุงุจ ุจูุฌุงุญ!",
          description: "ูุฑุฌู ุชููุฏ ุจุฑูุฏู ุงูุฅููุชุฑููู ูุชุฃููุฏ ุงูุญุณุงุจ",
        });
      }
    } catch (error: any) {
      toast({
        title: "โ ุฎุทุฃ",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);

    try {
      const { error } = await supabase.auth.signInWithPassword({
        email: formData.email,
        password: formData.password,
      });

      if (error) {
        toast({
          title: "โ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู",
          description: error.message,
          variant: "destructive"
        });
      } else {
        toast({
          title: "โ ุชู ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ!",
          description: "ูุฑุญุจุงู ุจู ูู ุณูู ุงูุชุฌุงุฑุฉ",
        });
        navigate('/');
      }
    } catch (error: any) {
      toast({
        title: "โ ุฎุทุฃ",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setLoading(true);
    try {
      const redirectUrl = `${window.location.origin}/`;
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: redirectUrl
        }
      });

      if (error) {
        toast({
          title: "โ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู",
          description: error.message,
          variant: "destructive"
        });
      }
    } catch (error: any) {
      toast({
        title: "โ ุฎุทุฃ",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleFacebookSignIn = async () => {
    setLoading(true);
    try {
      const redirectUrl = `${window.location.origin}/`;
      
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'facebook',
        options: {
          redirectTo: redirectUrl
        }
      });

      if (error) {
        toast({
          title: "โ ุฎุทุฃ ูู ุชุณุฌูู ุงูุฏุฎูู",
          description: error.message,
          variant: "destructive"
        });
      }
    } catch (error: any) {
      toast({
        title: "โ ุฎุทุฃ",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  const handleGuestMode = () => {
    toast({
      title: "๐ค ุฏุฎูู ูุถูู",
      description: "ููููู ุชุตูุญ ุงูููุชุฌุงุช ููู ูุง ููููู ุฅุถุงูุฉ ููุชุฌุงุช ุฃู ุงูุดุฑุงุก",
    });
    navigate('/');
  };

  return (
    <div className="min-h-screen bg-pattern flex items-center justify-center p-4" style={{ direction: 'rtl' }}>
      <Card className="w-full max-w-md bg-card-glass backdrop-blur-md border-card-border">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl font-arabic">
            ๐ ุณูู ุงูุชุฌุงุฑุฉ
          </CardTitle>
          <CardDescription className="font-arabic">
            ุงูุถู ุฅูู ุฃูุจุฑ ุณูู ุฅููุชุฑููู ูู ุงูููุทูุฉ
          </CardDescription>
        </CardHeader>

        <CardContent>
          <Tabs value={isSignUp ? "signup" : "signin"} onValueChange={(value) => setIsSignUp(value === "signup")}>
            <TabsList className="grid w-full grid-cols-2 mb-6">
              <TabsTrigger value="signin" className="font-arabic">ุชุณุฌูู ุงูุฏุฎูู</TabsTrigger>
              <TabsTrigger value="signup" className="font-arabic">ุฅูุดุงุก ุญุณุงุจ</TabsTrigger>
            </TabsList>

            <TabsContent value="signin">
              <form onSubmit={handleSignIn} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="email" className="font-arabic">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="example@email.com"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="font-arabic text-right"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="password" className="font-arabic">ูููุฉ ุงููุฑูุฑ</Label>
                  <div className="relative">
                    <Input
                      id="password"
                      type={showPassword ? "text" : "password"}
                      placeholder="โขโขโขโขโขโขโขโข"
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      className="font-arabic text-right pl-10"
                      required
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute left-0 top-0 h-full px-3"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>

                <Button
                  type="submit"
                  className="w-full bg-gradient-primary hover:bg-gradient-accent font-arabic"
                  disabled={loading}
                >
                  {loading ? "๐ ุฌุงุฑู ุงูุชุญููู..." : "๐ช ุชุณุฌูู ุงูุฏุฎูู"}
                </Button>
              </form>
            </TabsContent>

            <TabsContent value="signup">
              <form onSubmit={handleSignUp} className="space-y-4">
                <div className="grid grid-cols-2 gap-2">
                  <div className="space-y-2">
                    <Label htmlFor="firstName" className="font-arabic">ุงูุงุณู ุงูุฃูู</Label>
                    <Input
                      id="firstName"
                      placeholder="ุงูุงุณู ุงูุฃูู"
                      value={formData.firstName}
                      onChange={(e) => setFormData({ ...formData, firstName: e.target.value })}
                      className="font-arabic text-right"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="lastName" className="font-arabic">ุงุณู ุงูุนุงุฆูุฉ</Label>
                    <Input
                      id="lastName"
                      placeholder="ุงุณู ุงูุนุงุฆูุฉ"
                      value={formData.lastName}
                      onChange={(e) => setFormData({ ...formData, lastName: e.target.value })}
                      className="font-arabic text-right"
                      required
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="birthDate" className="font-arabic">ุชุงุฑูุฎ ุงููููุงุฏ</Label>
                  <Input
                    id="birthDate"
                    type="date"
                    value={formData.birthDate}
                    onChange={(e) => setFormData({ ...formData, birthDate: e.target.value })}
                    className="font-arabic text-right"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="nationality" className="font-arabic">ุงูุฌูุณูุฉ</Label>
                  <Select value={formData.nationality} onValueChange={(value) => setFormData({ ...formData, nationality: value })}>
                    <SelectTrigger className="font-arabic text-right">
                      <SelectValue placeholder="ุงุฎุชุฑ ุงูุฌูุณูุฉ..." />
                    </SelectTrigger>
                    <SelectContent className="bg-card-glass backdrop-blur-md max-h-60">
                      {countries.map((country, index) => (
                        <SelectItem key={index} value={country} className="font-arabic text-right">
                          {country}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address" className="font-arabic">ุงูุนููุงู</Label>
                  <Input
                    id="address"
                    placeholder="ุฃุฏุฎู ุนููุงูู..."
                    value={formData.address}
                    onChange={(e) => setFormData({ ...formData, address: e.target.value })}
                    className="font-arabic text-right"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="signup-email" className="font-arabic">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
                  <Input
                    id="signup-email"
                    type="email"
                    placeholder="example@email.com"
                    value={formData.email}
                    onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                    className="font-arabic text-right"
                    required
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="signup-password" className="font-arabic">ูููุฉ ุงููุฑูุฑ</Label>
                  <div className="relative">
                    <Input
                      id="signup-password"
                      type={showPassword ? "text" : "password"}
                      placeholder="โขโขโขโขโขโขโขโข"
                      value={formData.password}
                      onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                      className="font-arabic text-right pl-10"
                      required
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute left-0 top-0 h-full px-3"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                    </Button>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="avatar" className="font-arabic">ุงูุตูุฑุฉ ุงูุดุฎุตูุฉ</Label>
                  <Input
                    id="avatar"
                    type="file"
                    accept="image/*"
                    onChange={(e) => setFormData({ ...formData, avatar: e.target.files?.[0] || null })}
                    className="font-arabic"
                  />
                </div>

                <Button
                  type="submit"
                  className="w-full bg-gradient-primary hover:bg-gradient-accent font-arabic"
                  disabled={loading}
                >
                  {loading ? "๐ ุฌุงุฑู ุงูุชุญููู..." : "โ ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ"}
                </Button>
              </form>
            </TabsContent>
          </Tabs>

          <div className="mt-6 space-y-3">
            <div className="text-center font-arabic text-sm text-muted-foreground">
              ุฃู ุชุณุฌูู ุงูุฏุฎูู ุนุจุฑ
            </div>

            <div className="grid grid-cols-2 gap-3">
              <Button
                variant="outline"
                onClick={handleGoogleSignIn}
                disabled={loading}
                className="font-arabic bg-card-glass hover:bg-primary-glass"
              >
                ๐ฎ Google
              </Button>
              <Button
                variant="outline"
                onClick={handleFacebookSignIn}
                disabled={loading}
                className="font-arabic bg-card-glass hover:bg-primary-glass"
              >
                ๐ Facebook
              </Button>
            </div>

            <Button
              variant="ghost"
              onClick={handleGuestMode}
              className="w-full font-arabic bg-muted-glass hover:bg-card-glass"
            >
              ๐ค ุงูุฏุฎูู ูุถูู
            </Button>
          </div>

          <div className="mt-6 text-center text-sm font-arabic">
            <Button variant="link" className="p-0 text-primary">
              ุณูุงุณุฉ ุงูุฎุตูุตูุฉ
            </Button>
            {" โข "}
            <Button variant="link" className="p-0 text-primary">
              ุงุชูุงููุฉ ุงููุณุชุฎุฏู
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Auth;
>>>>>>> 406e6e1fa55f0aa354a97e93f4637c8c197d5497
